name: Release Package

on:
  push:
    tags:
      - 'v*.*.*'  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ–≥–∞—Ö —Ñ–æ—Ä–º–∞—Ç–∞ vX.Y.Z

env:
  PYTHON_VERSION: '3.12'
  PYTHON_MIN_VERSION: '3.8'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–µ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫–µ main
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      is-main-branch: ${{ steps.check-branch.outputs.is-main }}
      tag-version: ${{ steps.extract-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–µ—Ç–∫–∏

      - name: Extract version from tag
        id: extract-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

      - name: Check if tag is on main branch
        id: check-branch
        run: |
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –≤–µ—Ç–∫–µ main
          if git branch -r --contains ${{ github.sha }} | grep -q "origin/main"; then
            echo "is-main=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Tag is on main branch"
          else
            echo "is-main=false" >> $GITHUB_OUTPUT
            echo "‚ùå Tag is NOT on main branch"
            exit 1
          fi

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  test:
    needs: validate-tag
    if: needs.validate-tag.outputs.is-main-branch == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run linting
        run: |
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª—è –∫–æ–¥–∞ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω flake8)
          if command -v flake8 &> /dev/null; then
            flake8 appimage_fixer/ tests/
          fi
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω mypy)
          if command -v mypy &> /dev/null; then
            mypy appimage_fixer/
          fi

      - name: Run tests with coverage
        run: |
          pytest tests/ --cov=appimage_fixer --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞–∫–µ—Ç–∞
  build-and-publish:
    needs: [validate-tag, test]
    if: needs.validate-tag.outputs.is-main-branch == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write  # –î–ª—è PyPI

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-tag.outputs.tag-version }}
          name: Release ${{ needs.validate-tag.outputs.tag-version }}
          body: |
            ## üöÄ AppImage Fixer ${{ needs.validate-tag.outputs.tag-version }}
            
            ### üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞
            ```bash
            pip install appimage-fixer==${{ needs.validate-tag.outputs.tag-version }}
            ```
            
            ### üîß –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ desktop —Ñ–∞–π–ª–æ–≤ AppImage
            - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AppImageD
            - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ systemd
            
            ### üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è
            –°–º. [CHANGELOG.md](https://github.com/wolfDiesel/appimage_fixer/blob/main/CHANGELOG.md) –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.
            
            ### üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            - [–£—Å—Ç–∞–Ω–æ–≤–∫–∞](https://github.com/wolfDiesel/appimage_fixer/blob/main/docs/INSTALLATION.md)
            - [–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ](https://github.com/wolfDiesel/appimage_fixer/blob/main/docs/USAGE.md)
            - [FAQ](https://github.com/wolfDiesel/appimage_fixer/blob/main/docs/FAQ.md)
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    needs: [validate-tag, test, build-and-publish]
    if: always() && needs.validate-tag.outputs.is-main-branch == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.build-and-publish.result == 'success'
        run: |
          echo "‚úÖ Release ${{ needs.validate-tag.outputs.tag-version }} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
          echo "üì¶ PyPI: https://pypi.org/project/appimage-fixer/"
          echo "üè∑Ô∏è  GitHub Release: https://github.com/wolfDiesel/appimage_fixer/releases/tag/${{ needs.validate-tag.outputs.tag-version }}"

      - name: Notify failure
        if: needs.build-and-publish.result == 'failure'
        run: |
          echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–ª–∏–∑–∞ ${{ needs.validate-tag.outputs.tag-version }}"
          exit 1
